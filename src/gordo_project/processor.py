import pandas as pd
import pdfplumber


def _extract_lines(file_path):
    """Helper to read all lines from a PDF file."""
    with pdfplumber.open(file_path) as pdf:
        lines = []
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                lines.extend(text.splitlines())
    return lines

def read_excel(file_path):
    """Lee un archivo Excel y extrae productos, precios y marcas."""
    df = pd.read_excel(file_path)
    print(df.head())  # Muestra las primeras filas para debug
    return df

def read_pdf(file_path):
    """Lee un archivo PDF y extrae texto de cada p√°gina."""
    with pdfplumber.open(file_path) as pdf:
        text = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
    print(text[:500])  # Muestra los primeros 500 caracteres para debug
    return text


def parse_pdf_products(file_path):
    """Parse products from the PDF generated by ``create_pdf``."""
    lines = _extract_lines(file_path)
    products = []
    i = 0
    while i < len(lines):
        line = lines[i]
        if line.startswith("Producto:"):
            name = line.split("Producto:", 1)[1].strip()
            price = ""
            brand = ""
            if i + 1 < len(lines) and lines[i + 1].startswith("Precio:"):
                price = (
                    lines[i + 1].split("Precio:", 1)[1]
                    .strip()
                    .lstrip("$")
                )
            if i + 2 < len(lines) and lines[i + 2].startswith("Marca:"):
                brand = lines[i + 2].split("Marca:", 1)[1].strip()
            products.append({"Producto": name, "Precio": price, "Marca": brand})
            i += 3
        else:
            i += 1
    return products


def update_prices(old_products, modified_products):
    """Update price of ``old_products`` with ``modified_products``."""
    not_found = []
    for item in modified_products:
        name = str(item.get("Producto", "")).strip()
        price = item.get("Precio")
        found = False
        for prod in old_products:
            if str(prod.get("Producto", "")).strip().lower() == name.lower():
                prod["Precio"] = price
                found = True
                break
        if not found:
            not_found.append({"Producto": name, "Precio": price, "Marca": item.get("Marca", "")})
    return old_products, not_found
